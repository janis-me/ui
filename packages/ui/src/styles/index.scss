@forward '@janis.me/themed';

@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';

@use '@janis.me/themed';

// imports for all modules;
@use './variables/base';
@use './variables/button';
@use './variables/checkbox';
@use './variables/context-menu';
@use './variables/dropdown-menu';

// additional imports
@use './utils';

$_all-styles: utils.merge-multiple(base.$vars, button.$vars, checkbox.$vars, context-menu.$vars, dropdown-menu.$vars);

$_default-theme-map: ();

$_themes: ();

// used to only import styles for modules that are actually used
// this will take `button`, `checkbox`, etc. as arguments
@mixin components($modules...) {
  // always include the base variables
  $_default-theme-map: base.$vars !global;

  @each $module in $modules {
    $module-vars: meta.module-variables($module);
    $vars: map.get($module-vars, 'vars');

    @if $module-vars != null {
      $_default-theme-map: map.merge($_default-theme-map, $vars) !global;
    } @else {
      @warn 'Component `#{$module}` not found. Make sure it exists!';
    }
  }
}

// For every theme, set it to the default theme map
// That does not allow for proper theming just yet, but it's a start for testing.
// TODO: Figure out a way to let users easily add dark/light themes.
// Probably by using the built-in `themed` generators. But then I have to make these not-shit.
@mixin themes($themes...) {
  // Check if $_default-theme-map is empty. If so, we include all styles.
  // Ideally, users should use the `components` mixin, but if they don't we just
  // include everything.
  @if list.length(map.keys($_default-theme-map)) == 0 {
    $_default-theme-map: $_all-styles !global;
  }

  @each $theme in $themes {
    $_themes: map.set($_themes, $theme, $_default-theme-map) !global;
  }
}

@mixin override($themes...) {
  // TODO: Add validation
  @each $key, $vals in $themes {
    $_themes: map.set($_themes, $key, map.merge($_default-theme-map, $vals)) !global;
  }
}

@mixin configure($args...) {
  @include themed.configure($_themes, $args...);
}

@mixin apply() {
  @include themed.apply();
}
